{
  "name": "Yii2 IntlDateBehavior",
  "tagline": "Automatic Change Date System of an ActiveRecord After finding It",
  "body": "Yii2 IntlDateBehavior\r\n==================\r\n**Automatic Change Date System of an ActiveRecord After finding It.** Actually it converts date and time system just on representation and keep your model clean. So if you need a converter for change time and save it on DB, you can use [IntlDate](https://github.com/meysampg/intldate) trait ;).\r\n\r\n## Installation\r\n\r\n\r\nThe preferred way to install this extension is through [composer](http://getcomposer.org/download/).\r\n\r\nEither run\r\n\r\n```bash\r\ncomposer require meysampg/yii2-intldatebehavior \"*\"\r\n```\r\n\r\nor add\r\n\r\n```json\r\n\"meysampg/yii2-intldatebehavior\": \"*\"\r\n```\r\n\r\nto the require section of your `composer.json` file.\r\n\r\n\r\n## Usage\r\n\r\n\r\nOnce the extension is installed, simply use it in your class by `use meysampg\\behaviors\\IntlDateBehavior` and use it by attaching it as a behavior to your ActiveRecord model:\r\n\r\n```php\r\npublic function behaviors()\r\n{\r\n    return [\r\n        IntlDateBehavior::className(),\r\n    ];\r\n}\r\n```\r\n**Also in your model, you must change the rule of `timestamp` fields from `integer` to `safe`.**\r\n\r\nFor default, behavior try to show `created_at` and `updated_at` in your desired manner which both of them have `timestamp` type. If you wanna select other attributes, you can assign them as an array (a.e. `['time1', 'time2', 'time3']`) to `timestampAttributes` property.\r\n\r\n## Configuration\r\n\r\nConfiguration of this behavior can be on two way. The first one is using Yii2 configuration array, for example:\r\n\r\n```php\r\npublic function behaviors()\r\n{\r\n    return [\r\n        [\r\n            'class' => IntlDateBehavior::className(),\r\n            'timestampAttributes' => ['create_time', 'update_time', 'another_time'],\r\n            'calendar' => 'persian',\r\n            'format' => 'php:d F YØŒ H:m:i',\r\n            'locale' => 'fa',\r\n            'tz' => 'Asia/Tehran'\r\n        ],\r\n    ];\r\n}\r\n```\r\n\r\nThis is a local configuration. The second way is when you want to use this behavior in multiple model with same configurations, so you should add it as a behavior to model:\r\n\r\n```php\r\npublic function behaviors()\r\n{\r\n    return [\r\n        IntlDateBehavior::className(),\r\n    ];\r\n}\r\n```\r\n\r\nand put the configurations in `params.php` file. As an example, here is my `params.php`:\r\n\r\n```php\r\n<?php\r\n\r\nreturn [\r\n    // some params are here\r\n    'dateTimeFormat' => 'yyyy/MM/dd, HH:mm:ss',\r\n    'dateTimeCalendar' => 'persian',\r\n    'dateTimeLocale' => 'fa',\r\n    'dateTimeZone' => 'Asia/Tehran',\r\n];\r\n\r\n```\r\n\r\nIn this way you must assign a value to `'dateTimeFormat'` for date time format, `'dateTimeCalendar'` calendar system, `'dateTimeLocale'` for locale of showing date time information and `'dateTimeZone'` for timezone of region where datetime must be shown.\r\n\r\n### Supported Calendar\r\nThanks to [intldate](https://github.com/meysampg/intldate) and `intl` extension of php, this behavior supports these calendars:\r\n\r\n - persian\r\n - gregorian\r\n - japanese\r\n - buddhist\r\n - chinese\r\n - indian\r\n - islamic\r\n - hebrew\r\n - coptic\r\n - ethiopic\r\n\r\n## Contributions\r\nReport bugs or do your modification and send a pull request!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}